//go:build go1.22

// Package yaml_to_code provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package yaml_to_code

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/aleksandrzhukovskii/go-template/internal/model"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// Add defines model for add.
type Add struct {
	// Id New product id
	Id string `json:"id"`
}

// DbIssue defines model for db_issue.
type DbIssue struct {
	// Error error message
	Error string `json:"error"`
}

// Delete defines model for delete.
type Delete struct {
	// Msg response message
	Msg string `json:"msg"`
}

// NoDelete defines model for no_delete.
type NoDelete struct {
	// Error error message
	Error string `json:"error"`
}

// NoRows defines model for no_rows.
type NoRows struct {
	// Error error message
	Error string `json:"error"`
}

// NoUpdate defines model for no_update.
type NoUpdate struct {
	// Error error message
	Error string `json:"error"`
}

// Product defines model for product.
type Product = model.Product

// Products defines model for products.
type Products = []Product

// Update defines model for update.
type Update struct {
	// Msg response message
	Msg string `json:"msg"`
}

// UpdateRequest defines model for update_request.
type UpdateRequest struct {
	// Id ID of product
	Id string `json:"id"`

	// Name Name of product
	Name *string `json:"name,omitempty"`

	// Price Price of product
	Price *float64 `json:"price,omitempty"`
	union json.RawMessage
}

// UpdateRequest0 defines model for .
type UpdateRequest0 = interface{}

// UpdateRequest1 defines model for .
type UpdateRequest1 = interface{}

// DeleteProductParams defines parameters for DeleteProduct.
type DeleteProductParams struct {
	Id string `form:"id" json:"id"`
}

// GetProductParams defines parameters for GetProduct.
type GetProductParams struct {
	Id string `form:"id" json:"id"`
}

// UpdateProductFormdataRequestBody defines body for UpdateProduct for application/x-www-form-urlencoded ContentType.
type UpdateProductFormdataRequestBody = UpdateRequest

// AsUpdateRequest0 returns the union data inside the UpdateRequest as a UpdateRequest0
func (t UpdateRequest) AsUpdateRequest0() (UpdateRequest0, error) {
	var body UpdateRequest0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateRequest0 overwrites any union data inside the UpdateRequest as the provided UpdateRequest0
func (t *UpdateRequest) FromUpdateRequest0(v UpdateRequest0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateRequest0 performs a merge with any union data inside the UpdateRequest, using the provided UpdateRequest0
func (t *UpdateRequest) MergeUpdateRequest0(v UpdateRequest0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateRequest1 returns the union data inside the UpdateRequest as a UpdateRequest1
func (t UpdateRequest) AsUpdateRequest1() (UpdateRequest1, error) {
	var body UpdateRequest1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateRequest1 overwrites any union data inside the UpdateRequest as the provided UpdateRequest1
func (t *UpdateRequest) FromUpdateRequest1(v UpdateRequest1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateRequest1 performs a merge with any union data inside the UpdateRequest, using the provided UpdateRequest1
func (t *UpdateRequest) MergeUpdateRequest1(v UpdateRequest1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t UpdateRequest) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	object["id"], err = json.Marshal(t.Id)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'id': %w", err)
	}

	if t.Name != nil {
		object["name"], err = json.Marshal(t.Name)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'name': %w", err)
		}
	}

	if t.Price != nil {
		object["price"], err = json.Marshal(t.Price)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'price': %w", err)
		}
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *UpdateRequest) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["id"]; found {
		err = json.Unmarshal(raw, &t.Id)
		if err != nil {
			return fmt.Errorf("error reading 'id': %w", err)
		}
	}

	if raw, found := object["name"]; found {
		err = json.Unmarshal(raw, &t.Name)
		if err != nil {
			return fmt.Errorf("error reading 'name': %w", err)
		}
	}

	if raw, found := object["price"]; found {
		err = json.Unmarshal(raw, &t.Price)
		if err != nil {
			return fmt.Errorf("error reading 'price': %w", err)
		}
	}

	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns information about the request, it can be not just get but any method
	// (GET /)
	GetMain(w http.ResponseWriter, r *http.Request)
	// Adds new product
	// (POST /add)
	AddProduct(w http.ResponseWriter, r *http.Request)
	// Deletes product
	// (DELETE /delete)
	DeleteProduct(w http.ResponseWriter, r *http.Request, params DeleteProductParams)
	// Gets the product
	// (GET /get)
	GetProduct(w http.ResponseWriter, r *http.Request, params GetProductParams)
	// Gets products
	// (GET /get_all)
	GetProducts(w http.ResponseWriter, r *http.Request)
	// Updates product
	// (PUT /update)
	UpdateProduct(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetMain operation middleware
func (siw *ServerInterfaceWrapper) GetMain(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMain(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// AddProduct operation middleware
func (siw *ServerInterfaceWrapper) AddProduct(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddProduct(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteProduct operation middleware
func (siw *ServerInterfaceWrapper) DeleteProduct(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteProductParams

	// ------------- Required query parameter "id" -------------

	if paramValue := r.URL.Query().Get("id"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "id"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "id", r.URL.Query(), &params.Id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteProduct(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetProduct operation middleware
func (siw *ServerInterfaceWrapper) GetProduct(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProductParams

	// ------------- Required query parameter "id" -------------

	if paramValue := r.URL.Query().Get("id"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "id"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "id", r.URL.Query(), &params.Id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProduct(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetProducts operation middleware
func (siw *ServerInterfaceWrapper) GetProducts(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProducts(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateProduct operation middleware
func (siw *ServerInterfaceWrapper) UpdateProduct(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateProduct(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/", wrapper.GetMain)
	m.HandleFunc("POST "+options.BaseURL+"/add", wrapper.AddProduct)
	m.HandleFunc("DELETE "+options.BaseURL+"/delete", wrapper.DeleteProduct)
	m.HandleFunc("GET "+options.BaseURL+"/get", wrapper.GetProduct)
	m.HandleFunc("GET "+options.BaseURL+"/get_all", wrapper.GetProducts)
	m.HandleFunc("PUT "+options.BaseURL+"/update", wrapper.UpdateProduct)

	return m
}

type DbIssueJSONResponse DbIssue

type NoRowsJSONResponse NoRows

type NoUpdateJSONResponse NoUpdate

type GetMainRequestObject struct {
}

type GetMainResponseObject interface {
	VisitGetMainResponse(w http.ResponseWriter) error
}

type GetMain200TextResponse string

func (response GetMain200TextResponse) VisitGetMainResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(200)

	_, err := w.Write([]byte(response))
	return err
}

type GetMain500TextResponse string

func (response GetMain500TextResponse) VisitGetMainResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type AddProductRequestObject struct {
}

type AddProductResponseObject interface {
	VisitAddProductResponse(w http.ResponseWriter) error
}

type AddProduct200JSONResponse Add

func (response AddProduct200JSONResponse) VisitAddProductResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AddProduct500JSONResponse struct{ DbIssueJSONResponse }

func (response AddProduct500JSONResponse) VisitAddProductResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProductRequestObject struct {
	Params DeleteProductParams
}

type DeleteProductResponseObject interface {
	VisitDeleteProductResponse(w http.ResponseWriter) error
}

type DeleteProduct200JSONResponse Delete

func (response DeleteProduct200JSONResponse) VisitDeleteProductResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProduct400JSONResponse NoDelete

func (response DeleteProduct400JSONResponse) VisitDeleteProductResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProduct500JSONResponse struct{ DbIssueJSONResponse }

func (response DeleteProduct500JSONResponse) VisitDeleteProductResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetProductRequestObject struct {
	Params GetProductParams
}

type GetProductResponseObject interface {
	VisitGetProductResponse(w http.ResponseWriter) error
}

type GetProduct200JSONResponse Product

func (response GetProduct200JSONResponse) VisitGetProductResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProduct400JSONResponse struct{ NoRowsJSONResponse }

func (response GetProduct400JSONResponse) VisitGetProductResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetProduct500JSONResponse struct{ DbIssueJSONResponse }

func (response GetProduct500JSONResponse) VisitGetProductResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetProductsRequestObject struct {
}

type GetProductsResponseObject interface {
	VisitGetProductsResponse(w http.ResponseWriter) error
}

type GetProducts200JSONResponse Products

func (response GetProducts200JSONResponse) VisitGetProductsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProducts500JSONResponse struct{ DbIssueJSONResponse }

func (response GetProducts500JSONResponse) VisitGetProductsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProductRequestObject struct {
	Body *UpdateProductFormdataRequestBody
}

type UpdateProductResponseObject interface {
	VisitUpdateProductResponse(w http.ResponseWriter) error
}

type UpdateProduct200JSONResponse Update

func (response UpdateProduct200JSONResponse) VisitUpdateProductResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProduct400JSONResponse struct{ NoUpdateJSONResponse }

func (response UpdateProduct400JSONResponse) VisitUpdateProductResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProduct500JSONResponse struct{ DbIssueJSONResponse }

func (response UpdateProduct500JSONResponse) VisitUpdateProductResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Returns information about the request, it can be not just get but any method
	// (GET /)
	GetMain(ctx context.Context, request GetMainRequestObject) (GetMainResponseObject, error)
	// Adds new product
	// (POST /add)
	AddProduct(ctx context.Context, request AddProductRequestObject) (AddProductResponseObject, error)
	// Deletes product
	// (DELETE /delete)
	DeleteProduct(ctx context.Context, request DeleteProductRequestObject) (DeleteProductResponseObject, error)
	// Gets the product
	// (GET /get)
	GetProduct(ctx context.Context, request GetProductRequestObject) (GetProductResponseObject, error)
	// Gets products
	// (GET /get_all)
	GetProducts(ctx context.Context, request GetProductsRequestObject) (GetProductsResponseObject, error)
	// Updates product
	// (PUT /update)
	UpdateProduct(ctx context.Context, request UpdateProductRequestObject) (UpdateProductResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetMain operation middleware
func (sh *strictHandler) GetMain(w http.ResponseWriter, r *http.Request) {
	var request GetMainRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetMain(ctx, request.(GetMainRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMain")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetMainResponseObject); ok {
		if err := validResponse.VisitGetMainResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// AddProduct operation middleware
func (sh *strictHandler) AddProduct(w http.ResponseWriter, r *http.Request) {
	var request AddProductRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AddProduct(ctx, request.(AddProductRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AddProduct")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AddProductResponseObject); ok {
		if err := validResponse.VisitAddProductResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteProduct operation middleware
func (sh *strictHandler) DeleteProduct(w http.ResponseWriter, r *http.Request, params DeleteProductParams) {
	var request DeleteProductRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteProduct(ctx, request.(DeleteProductRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteProduct")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteProductResponseObject); ok {
		if err := validResponse.VisitDeleteProductResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProduct operation middleware
func (sh *strictHandler) GetProduct(w http.ResponseWriter, r *http.Request, params GetProductParams) {
	var request GetProductRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetProduct(ctx, request.(GetProductRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProduct")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetProductResponseObject); ok {
		if err := validResponse.VisitGetProductResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProducts operation middleware
func (sh *strictHandler) GetProducts(w http.ResponseWriter, r *http.Request) {
	var request GetProductsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetProducts(ctx, request.(GetProductsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProducts")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetProductsResponseObject); ok {
		if err := validResponse.VisitGetProductsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateProduct operation middleware
func (sh *strictHandler) UpdateProduct(w http.ResponseWriter, r *http.Request) {
	var request UpdateProductRequestObject

	if err := r.ParseForm(); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode formdata: %w", err))
		return
	}
	var body UpdateProductFormdataRequestBody
	if err := runtime.BindForm(&body, r.Form, nil, nil); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't bind formdata: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateProduct(ctx, request.(UpdateProductRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateProduct")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateProductResponseObject); ok {
		if err := validResponse.VisitUpdateProductResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
