package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"bytes"
	"context"
	"fmt"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/aleksandrzhukovskii/go-template/internal/model"
)

// AddProduct is the resolver for the addProduct field.
func (r *mutationResolver) AddProduct(ctx context.Context) (AddProductResponse, error) {
	id, err := r.db.Add(ctx)
	if err != nil {
		return AddProductResponse{}, err
	}
	return AddProductResponse{ID: id}, nil
}

// UpdateProduct is the resolver for the updateProduct field.
func (r *mutationResolver) UpdateProduct(ctx context.Context, id string, name *string, price *float64) (MessageResponse, error) {
	if name == nil && price == nil {
		return MessageResponse{}, model.ErrorNoUpdateParams
	}
	prod := model.Product{
		ID: id,
	}
	if name != nil {
		prod.Name = *name
	}
	if price != nil {
		prod.Price = *price
	}
	err := r.db.Update(ctx, prod)
	if err != nil {
		return MessageResponse{}, err
	}
	return MessageResponse{Msg: "Product updated"}, nil
}

// DeleteProduct is the resolver for the deleteProduct field.
func (r *mutationResolver) DeleteProduct(ctx context.Context, id string) (MessageResponse, error) {
	if err := r.db.Delete(ctx, id); err != nil {
		return MessageResponse{}, err
	}
	return MessageResponse{Msg: "Product deleted"}, nil
}

// Main is the resolver for the main field.
func (r *queryResolver) Main(ctx context.Context) (string, error) {
	oc := graphql.GetOperationContext(ctx)
	var response bytes.Buffer

	response.WriteString(fmt.Sprintf("Method: %s\nURL: %s\nRemote Addr: %s\nHeaders:\n", ctx.Value(methodKey),
		ctx.Value(urlKey), ctx.Value(ipKey)))
	for name, values := range oc.Headers {
		for _, value := range values {
			response.WriteString(fmt.Sprintf("\t%s: %s\n", name, value))
		}
	}

	response.WriteString(fmt.Sprintf("Body: %s\n", oc.RawQuery))

	response.WriteString(fmt.Sprintf("Query playground: http://%s/query_playground\n", r.server.Addr))
	response.WriteString(fmt.Sprintf("Subscription playground: http://%s/subscription_playground\n", r.server.Addr))

	return response.String(), nil
}

// GetProduct is the resolver for the getProduct field.
func (r *queryResolver) GetProduct(ctx context.Context, filter ProductFilter) (model.Product, error) {
	val, err := r.db.Get(ctx, filter.ID)
	if err != nil {
		return model.Product{}, err
	}
	return val, nil
}

// GetProducts is the resolver for the getProducts field.
func (r *queryResolver) GetProducts(ctx context.Context) ([]model.Product, error) {
	val, err := r.db.GetAll(ctx)
	if err != nil {
		return nil, err
	}

	return val, nil
}

// Time is the resolver for the time field.
func (r *subscriptionResolver) Time(ctx context.Context) (<-chan uint32, error) {
	ret := make(chan uint32, 10)
	tick := time.NewTicker(time.Second)
	go func() {
		for {
			select {
			case <-ctx.Done():
				tick.Stop()
				close(ret)
				return
			case t := <-tick.C:
				ret <- uint32(t.Unix())
			}
		}
	}()
	return ret, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
